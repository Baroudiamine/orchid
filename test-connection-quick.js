// Test rapide de connexion Frontend-Backend
const API_BASE_URL = 'http://localhost:3000';

async function testConnection() {
  console.log('üîç Test de connexion Frontend-Backend...\n');
  
  // Test 1: Backend accessible
  console.log('1Ô∏è‚É£ Test d\'accessibilit√© du backend...');
  try {
    const response = await fetch(`${API_BASE_URL}/`);
    if (response.ok) {
      const text = await response.text();
      console.log('‚úÖ Backend accessible:', text);
    } else {
      console.log('‚ùå Backend non accessible, status:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Impossible de se connecter au backend:', error.message);
    console.log('üí° Assurez-vous que le backend est d√©marr√© avec: cd backend && npm start');
    return false;
  }
  
  // Test 2: API Properties
  console.log('\n2Ô∏è‚É£ Test de l\'API des propri√©t√©s...');
  try {
    const response = await fetch(`${API_BASE_URL}/properties`);
    if (response.ok) {
      const properties = await response.json();
      console.log(`‚úÖ API Properties fonctionne - ${properties.length} propri√©t√©s trouv√©es`);
      
      if (properties.length > 0) {
        console.log('üìã Exemple de propri√©t√©:', {
          id: properties[0]._id,
          title: properties[0].title,
          price: properties[0].price,
          city: properties[0].city
        });
      }
    } else {
      console.log('‚ùå API Properties non accessible, status:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur API Properties:', error.message);
  }
  
  // Test 3: Cr√©ation d'une propri√©t√© de test
  console.log('\n3Ô∏è‚É£ Test de cr√©ation de propri√©t√©...');
  const testProperty = {
    title: "Test Property - √Ä supprimer",
    description: "Propri√©t√© de test pour v√©rifier la connexion",
    price: 1000000,
    location: "Test Location",
    city: "Casablanca",
    type: "Villa",
    bedrooms: 3,
    bathrooms: 2,
    area: 200,
    status: "draft",
    featured: false,
    mainImage: "https://via.placeholder.com/600x400",
    additionalImages: [],
    amenities: ["Test Amenity"],
    yearBuilt: 2023,
    parking: "2",
    garden: false,
    pool: false,
    security: false,
    furnished: false
  };
  
  try {
    const response = await fetch(`${API_BASE_URL}/properties`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testProperty),
    });
    
    if (response.ok) {
      const createdProperty = await response.json();
      console.log('‚úÖ Cr√©ation de propri√©t√© r√©ussie:', createdProperty.title);
      
      // Test 4: Suppression de la propri√©t√© de test
      console.log('\n4Ô∏è‚É£ Test de suppression de propri√©t√©...');
      const deleteResponse = await fetch(`${API_BASE_URL}/properties/${createdProperty._id}`, {
        method: 'DELETE',
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ Suppression de propri√©t√© r√©ussie');
      } else {
        console.log('‚ö†Ô∏è Impossible de supprimer la propri√©t√© de test');
      }
      
    } else {
      console.log('‚ùå Cr√©ation de propri√©t√© √©chou√©e, status:', response.status);
      const errorText = await response.text();
      console.log('üìÑ Erreur:', errorText);
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la cr√©ation:', error.message);
  }
  
  console.log('\nüéØ R√©sum√©:');
  console.log('‚úÖ Backend: Accessible');
  console.log('‚úÖ API Properties: Fonctionnelle');
  console.log('‚úÖ CRUD: Op√©rationnel');
  console.log('\nüöÄ Votre frontend est connect√© au backend !');
  console.log('üìñ Consultez TEST_FRONTEND_BACKEND.md pour les tests complets');
  
  return true;
}

// Ex√©cuter le test
if (typeof window === 'undefined') {
  // Node.js environment
  const fetch = require('node-fetch');
  testConnection();
} else {
  // Browser environment
  window.testConnection = testConnection;
  console.log('Test disponible. Appelez testConnection() pour l\'ex√©cuter.');
}
